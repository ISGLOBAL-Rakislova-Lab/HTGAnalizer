# Calcular la distancia de cada muestra al centro promedio en el espacio PCA
pca_data$distancia_al_centro <- sqrt((pca_data$PC1 - centro_promedio[1])^2 + (pca_data$PC2 - centro_promedio[2])^2)
# Ordenar las muestras por distancia al centro promedio de manera descendente
pca_data <- pca_data[order(-pca_data$distancia_al_centro), ]
# Seleccionar las muestras más alejadas (por ejemplo, las 6 más alejadas)
muestras_a_etiquetar <- head(pca_data$label, 10)
# Crear una nueva columna llamada etiquetada y asignar valores
pca_data$etiquetada <- ifelse(pca_data$label %in% muestras_a_etiquetar, "Etiquetada", "No etiquetada")
# Calcular el porcentaje de variabilidad explicada por cada componente principal
porcentaje_explicado <- round(100 * pca_result$sdev^2 / sum(pca_result$sdev^2), 2)
# Construir el título del eje x e y con el porcentaje de variabilidad explicada
titulo_x <- paste0("PC1 (", porcentaje_explicado[1], "%)")
titulo_y <- paste0("PC2 (", porcentaje_explicado[2], "%)")
# Graficar el PCA con etiquetas para las muestras más alejadas
ggplot(pca_data, aes(x = PC1, y = PC2, color = etiquetada)) +
geom_point() +
geom_text_repel(data = subset(pca_data, etiquetada == "Etiquetada"), aes(label = label), color = "red") +
labs(title = "PCA muestras",
x = titulo_x,
y = titulo_y) +
theme(legend.position = "none",
plot.margin = margin(0.5, 1, 0.5, 0.5, "cm")) +
scale_color_manual(values = c("Etiquetada" = "red", "No etiquetada" = "black")) +
scale_y_continuous(labels = scales::scientific_format())
##########   Se remarcan en rojo las muestras más dispares respecto al promedio del conjunto.
muestras_a_etiquetar
# Tomar los porcentajes de las primeras 10 componentes principales
porcentaje_explicado_10 <- head(porcentaje_explicado, 10)
# Calcular la varianza explicada acumulada
varianza_acumulada <- cumsum(porcentaje_explicado)
varianza_acumulada_10 <- head(varianza_acumulada,10)
# Crear un dataframe para ggplot
bardata <- data.frame(Componente = factor(paste("PC", 1:10), levels = paste("PC", 1:10)),
Porcentaje = porcentaje_explicado_10)
# Crear el gráfico de barras con ggplot2
ggplot(bardata, aes(x = Componente, y = Porcentaje)) +
geom_bar(stat = "identity", fill = "skyblue") +
geom_text(aes(label = sprintf("%.2f", varianza_acumulada_10)),
vjust = -0.5, size = 3, color = "black") +
labs(title = "10 primeras componentes principales",
x = "Componentes principales",
y = "Variabilidad explicada (%)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotar etiquetas del eje x para mejor visualización
# Calcular la varianza explicada acumulada
varianza_acumulada <- cumsum(porcentaje_explicado)
varianza_acumulada_10 <- head(varianza_acumulada,10)
df <- data.frame(varianza_acumulada_10, pc = factor(paste("PC", 1:10, sep=""), levels = paste("PC", 1:10, sep="")))
ggplot(data = df, aes(x = pc, y = varianza_acumulada_10, group = 1)) +
geom_point() +
geom_line() +
theme_bw() +
labs(x = "Componente principal",
y = "Varianza explicada acumulada (%)")
counts_filtered <- subset(counts, !grepl("^NC-|^POS-|^GDNA-|^ERCC-", rownames(counts)))
dim(counts)
dim(counts_filtered)
tail(counts_filtered)
counts[19394:19516,]
# Realizar el PCA de la matriz counts_filtered
pca_result2 <- prcomp(t(counts_filtered))
# Crear un dataframe con los resultados del PCA
pca_data2 <- as.data.frame(pca_result2$x[,1:2])
# Agregar una columna "label" y asignar etiquetas a las muestras
pca_data2$label <- rownames(pca_data2)
# Calcular el centro promedio en el espacio PCA
centro_promedio2 <- colMeans(pca_data2[, c("PC1", "PC2")])
# Calcular la distancia de cada muestra al centro promedio en el espacio PCA
pca_data2$distancia_al_centro <- sqrt((pca_data2$PC1 - centro_promedio2[1])^2 + (pca_data2$PC2 - centro_promedio2[2])^2)
# Ordenar las muestras por distancia al centro promedio de manera descendente
pca_data2 <- pca_data2[order(-pca_data2$distancia_al_centro), ]
# Seleccionar las muestras más alejadas
muestras_a_etiquetar2 <- head(pca_data2$label, 10)
# Crear una nueva columna llamada etiquetada y asignar valores
pca_data2$etiquetada <- ifelse(pca_data2$label %in% muestras_a_etiquetar2, "Etiquetada", "No etiquetada")
matching_indices <- match(pca_data2$label, AnnotData$SampleID)
pca_data2$group <- AnnotData$HPVstatus[matching_indices]
##### LEt's check
head(pca_data2)
sample_ids <- c("B08-34343", "B19-06857", "B17-31410", "B20-11525", "B04-04716", "B19-19077", "B20-11525", "B04-04716", "B19-19077")
subset_data <- subset(AnnotData, SampleID %in% sample_ids)
print(subset_data)
# Calcular el porcentaje de variabilidad explicada por cada componente principal
porcentaje_explicado2 <- round(100 * pca_result2$sdev^2 / sum(pca_result2$sdev^2), 2)
# Construir el título del eje x e y con el porcentaje de variabilidad explicada
titulo_x2 <- paste0("PC1 (", porcentaje_explicado2[1], "%)")
titulo_y2 <- paste0("PC2 (", porcentaje_explicado2[2], "%)")
# Graficar el PCA con etiquetas para las muestras más alejadas
ggplot(pca_data2, aes(x = PC1, y = PC2, color = etiquetada)) +
geom_point() +
geom_text_repel(data = subset(pca_data2, etiquetada == "Etiquetada"), aes(label = label), color = "red") +
labs(title = "PCA muestras (solo genes)",
x = titulo_x2,
y = titulo_y2) +
theme(legend.position = "none",
plot.margin = margin(0.5, 1, 0.5, 0.5, "cm")) +
scale_color_manual(values = c("Etiquetada" = "red", "No etiquetada" = "black")) +
scale_y_continuous(labels = scales::scientific_format())
muestras_a_etiquetar2
# Tomar los porcentajes de las primeras 10 componentes principales
porcentaje_explicado2_10 <- head(porcentaje_explicado2, 10)
# Calcular la varianza explicada acumulada
varianza_acumulada2 <- cumsum(porcentaje_explicado2)
varianza_acumulada2_10 <- head(varianza_acumulada2,10)
# Crear un dataframe para ggplot
bardata2 <- data.frame(Componente = factor(paste("PC", 1:10), levels = paste("PC", 1:10)),
Porcentaje = porcentaje_explicado2_10)
# Crear el gráfico de barras con ggplot2
ggplot(bardata2, aes(x = Componente, y = Porcentaje)) +
geom_bar(stat = "identity", fill = "skyblue") +
geom_text(aes(label = sprintf("%.2f", varianza_acumulada2_10)),
vjust = -0.5, size = 3, color = "black") +
labs(title = "10 primeras componentes principales",
x = "Componentes principales",
y = "Variabilidad explicada (%)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotar etiquetas del eje x para mejor visualización
# Calcular la varianza explicada acumulada
varianza_acumulada2 <- cumsum(porcentaje_explicado2)
varianza_acumulada2_10 <- head(varianza_acumulada2,10)
df2 <- data.frame(varianza_acumulada2_10, pc = factor(paste("PC", 1:10, sep=""), levels = paste("PC", 1:10, sep="")))
ggplot(data = df2, aes(x = pc, y = varianza_acumulada2_10, group = 1)) +
geom_point() +
geom_line() +
theme_bw() +
labs(x = "Componente principal",
y = "Varianza explicada acumulada (%)")
# Realizar el PCA de la matriz counts_filtered
pca_result2 <- prcomp(t(counts_filtered))
# Crear un dataframe con los resultados del PCA
pca_data2 <- as.data.frame(pca_result2$x[,1:4])
pca_data2$grupo <- factor(AnnotData$HPVstatus[match(rownames(pca_data2), AnnotData$SampleID)])
# Construir el título del eje x e y con el porcentaje de variabilidad explicada
porcentaje_explicado2 <- round(100 * pca_result2$sdev^2 / sum(pca_result2$sdev^2), 2)
titulo_x2 <- paste0("PC1 (", porcentaje_explicado2[1], "%)")
titulo_y2 <- paste0("PC2 (", porcentaje_explicado2[2], "%)")
# Grafica del PCA sin etiquetas para los grupos de muestras y con leyenda
ggplot(pca_data2, aes(x = PC1, y = PC2, color = grupo)) +
geom_point() +
labs(title = "PCA de muestras (solo genes)",
x = titulo_x2,
y = titulo_y2,
color = "Grupo") +  # Título de la leyenda
theme(plot.margin = margin(0.5, 1, 0.5, 0.5, "cm")) +
# scale_color_manual(values = c("PCNSL" = "blue", "SCNSL" = "green",
#                               "DLBCL with CNS inv" = "yellow",
#                               "DLBCL wo CNS inv" = "red",
#                               "REACTIVE BRAIN INFILTRATE" = "black")) +
scale_y_continuous(labels = scales::scientific_format())
# Crear una lista para almacenar los gráficos
plots <- list()
# Iterar sobre todas las combinaciones de componentes principales
for (i in 1:3) {
for (j in (i+1):4) {
# Crear el gráfico de dispersión para la combinación de componentes i y j
p <- ggplot(pca_data2, aes(x = .data[[paste0("PC", i)]], y = .data[[paste0("PC", j)]], color = grupo)) +
geom_point() +
labs(title = NULL) +  # Eliminar los títulos
# scale_color_manual(values = c("PCNSL" = "blue", "SCNSL" = "green",
#                                "DLBCL with CNS inv" = "yellow",
#                                "DLBCL wo CNS inv" = "red",
#                                "REACTIVE BRAIN INFILTRATE" = "black")) +
theme(legend.position = "none",
axis.text.x = element_text(angle = 45, hjust = 1))
# Añadir el gráfico a la lista
plots[[length(plots) + 1]] <- p
}
}
library(cowplot)
# Crear una cuadrícula de gráficos con una leyenda común
plot_grid(plotlist = plots, nrow = 2, align = "hv", rel_widths = c(2, 2, 2, 1)) +
theme(plot.title = element_text(hjust = 0.5, size = 14, face = "bold")) +  # Título centrado
labs(title = "Análisis de la varianza PCA") +  # Título general
theme(legend.position = "bottom")  # Mover la leyenda a la parte inferior
# Subsets de cts
cts_ctrls<- subset(counts, grepl("^NC-|^POS-|^GDNA-|^ERCC-", rownames(counts)))
head(cts_ctrls)
tail(cts_ctrls)
# Realizar el PCA de la matriz cts_ctrls
pca_result3 <- prcomp(t(cts_ctrls))
# Crear un dataframe con los resultados del PCA
pca_data3 <- as.data.frame(pca_result3$x[,1:4])
# Crear un vector con la variable flag de AnnotData para clasificar
vector_flag <- AnnotData$tag[match(rownames(pca_data3), AnnotData$SampleID)]
vector_flag[is.na(vector_flag)] <- "na" # Imputar los valores faltantes
# Factorizar el vector_flag para incluir na como un nivel
vector_flag <- factor(vector_flag, levels = c("yes", "no", "Na"))
pca_data3$flag <- factor(vector_flag) # Añadir el vector como columna de pca_data3
# Calcular el porcentaje de variabilidad explicada por cada componente principal
porcentaje_explicado3 <- round(100 * pca_result3$sdev^2 / sum(pca_result3$sdev^2), 2)
# Construir el título del eje x e y con el porcentaje de variabilidad explicada
titulo_x3 <- paste0("PC1 (", porcentaje_explicado3[1], "%)")
titulo_y3 <- paste0("PC2 (", porcentaje_explicado3[2], "%)")
# Construir el título del eje x e y con el porcentaje de variabilidad explicada
porcentaje_explicado3 <- round(100 * pca_result3$sdev^2 / sum(pca_result3$sdev^2), 2)
titulo_x3 <- paste0("PC1 (", porcentaje_explicado2[1], "%)")
titulo_y3 <- paste0("PC2 (", porcentaje_explicado2[2], "%)")
# Grafica del PCA sin etiquetas para los grupos de muestras y con leyenda
ggplot(pca_data3, aes(x = PC1, y = PC2, color = flag)) +
geom_point() +
labs(title = "PCA de muestras (controles)",
x = titulo_x3,
y = titulo_y3,
color = "flag") +  # Título de la leyenda
theme(plot.margin = margin(0.5, 1, 0.5, 0.5, "cm")) +
scale_color_manual(values = c("yes" = "red", "no" = "green", "Na" = "black")) +
scale_y_continuous(labels = scales::scientific_format()) +
scale_x_continuous(labels = scales::scientific_format())
# Crear una lista para almacenar los gráficos
plots_qc <- list()
# Iterar sobre todas las combinaciones de componentes principales
for (i in 1:3) {
for (j in (i+1):4) {
# Crear el gráfico de dispersión para la combinación de componentes i y j
p <- ggplot(pca_data3, aes(x = .data[[paste0("PC", i)]], y = .data[[paste0("PC", j)]], color = flag)) +
geom_point() +
labs(title = NULL) +  # Eliminar los títulos
scale_color_manual(values = c("yes" = "red",
"no" = "green",
"Na" = "black")) +
theme(legend.position = "none",
axis.text.x = element_text(angle = 45, hjust = 1))
# Añadir el gráfico a la lista
plots_qc[[length(plots_qc) + 1]] <- p
}
}
# Crear una cuadrícula de gráficos con una leyenda común
plot_grid(plotlist = plots_qc, nrow = 2, align = "hv", rel_widths = c(2, 2, 2, 1)) +
theme(plot.title = element_text(hjust = 0.5, size = 14, face = "bold")) +  # Título centrado
labs(title = "Análisis de la varianza PCA QC of control") +  # Título general
theme(legend.position = "bottom")  # Mover la leyenda a la parte inferior
# Crear un dataframe con las muestras y la variable flag de AnnotData
flag <- AnnotData$tag
flag_df <- data.frame("Muestra" = colnames(counts_filtered), "flag" = flag)
# Ordenar flag_df según la variable flag
flag_df <- flag_df[order(flag_df$flag), ]
# Reorganizar las columnas en counts_filtered según el orden de las muestras en flag_df
counts_filtered_ordered <- counts_filtered[, order(match(colnames(counts_filtered), flag_df$Muestra))]
# Crear un vector de colores según la variable flag
colores <- ifelse(flag_df$flag == "yes", "red", ifelse(flag_df$flag == "no", "green", "white"))
# Crear el gráfico de caja con los datos ordenados y colorear según la variable flag
boxplot(log(counts_filtered_ordered + 1), col = colores,
xaxt = "n", ylab = "Counts (log scale)",
main = "Counts por muestra (genes)")
axis(1, at = 1:ncol(counts_filtered_ordered), labels = colnames(counts_filtered_ordered),
las = 2, cex.axis = 0.7)
# Asignar flag a cts_ctrls
# Reorganizar las columnas en cts_gens según el orden de las muestras en flag_df
cts_ctrls_ordered <- cts_ctrls[, order(match(colnames(cts_ctrls),
flag_df$Muestra))]
# Subsets de cts_ctrls
cts_ERCC <- as.data.frame(cts_ctrls_ordered[1:92, ])
rownames(cts_ERCC)
dim(cts_ERCC)
cts_GDNA <- as.data.frame(cts_ctrls_ordered[93:114, ])
rownames(cts_GDNA)
dim(cts_GDNA)
cts_NC <- as.data.frame(cts_ctrls_ordered[115:214, ])
rownames(cts_NC)
dim(cts_NC)
cts_POS <- as.data.frame(tail(cts_ctrls_ordered, 4))
rownames(cts_POS)
dim(cts_POS)
# boxplot cts_ERCC
boxplot(log(cts_ERCC + 1), col = colores,
xaxt = "n", ylab = "Counts (log scale)",
main = "Counts por muestra (controles ERCC)")
axis(1, at = 1:ncol(cts_ERCC), labels = colnames(cts_ERCC),
las = 2, cex.axis = 0.7)
# boxplot cts_GDNA
boxplot(log(cts_GDNA + 1), col = colores,
xaxt = "n", ylab = "Counts (log scale)",
main = "Counts por muestra (controles GDNA)")
axis(1, at = 1:ncol(cts_GDNA), labels = colnames(cts_GDNA),
las = 2, cex.axis = 0.7)
# boxplot cts_NC
boxplot(log(cts_NC + 1), col = colores,
xaxt = "n", ylab = "Counts (log scale)",
main = "Counts por muestra (controles cts_NC)")
axis(1, at = 1:ncol(cts_NC), labels = colnames(cts_NC), las = 2, cex.axis = 0.7)
# boxplot cts_POS
boxplot(log(cts_POS + 1), col = colores,
xaxt = "n", ylab = "Counts (log scale)",
main = "Counts por muestra (controles cts_POS)")
axis(1, at = 1:ncol(cts_POS), labels = colnames(cts_POS), las = 2, cex.axis = 0.7)
library_size <- colSums(counts_filtered_ordered)
# Crear el dataframe del tamaño de librería
lib_s <- data.frame(Size = library_size)
# Density plot
plot(density(lib_s$Size),
col = "skyblue4",
main = "Tamaño de Librería por Muestra",
xlab = "Counts")
# En tu caso, sustituye "library_size" por tus datos reales
lib_s2 <- data.frame(Sample = colnames(counts_filtered_ordered), Size = library_size)
# Crear el gráfico de barras
barplot(lib_s2$Size,
names.arg = lib_s2$Sample,
col = colores,
border = "black",
main = "Tamaño de Librería por Muestra",
cex.axis = 0.8,
cex.names = 0.8,  # Reducir el tamaño de las etiquetas del eje x
las = 2)  # Rotar las etiquetas del eje x
abline(h = 7e+06, col = "red")
min_values <- apply(counts_filtered_ordered, 2, min)
max_values <- apply(counts_filtered_ordered, 2, max)
mean_values <- apply(counts_filtered_ordered, 2, mean)
median_values <- apply(counts_filtered_ordered, 2, median)
summary_stats <- data.frame(
Min = min_values,
Max = max_values,
Mean = mean_values,
Median = median_values
)
print(summary_stats)
##### counts_filtered_order no tiene ningun control.
total_gens <- colSums(counts_filtered_ordered)
total_POS <- colSums(cts_POS)
total_NC <- colSums(cts_NC)
total_GDNA <- colSums(cts_GDNA)
total_ERCC <- colSums(cts_ERCC)
ratios <- data.frame(total_POS,total_GDNA,total_gens,total_NC,total_ERCC)
ratios$"pos/gens" <- (ratios$total_POS/ratios$total_gens)*100
ratios$"gdna/gens" <-(ratios$total_GDNA/ratios$total_gens)*100
ratios$"nc/gens" <-(ratios$total_NC/ratios$total_gens)*100
ratios$"ERCC/gens"<- (ratios$total_ERCC/ratios$total_gens)*100
ratios$median <- summary_stats$Median
ratios$muestras <- factor(rownames(ratios))
ratios$flag <- flag_df$flag
ratios$flag[is.na(ratios$flag)] <- "na"
colores <- ifelse(ratios$flag == "yes","red" , ifelse(ratios$flag == "no", "green", "black"))
# write.csv(ratios, "ratios.csv", row.names = TRUE)
# Controles positivos
plot(ratios$`pos/gens`, xlab = "", ylab = "pos/gens", col = colores,
xaxt = "n", pch=19)
axis(1, at = 1:nrow(ratios), labels = rownames(ratios),
las = 2, cex.axis = 0.6)
#abline(h = 10, col = "red")
abline(h = 4, col = "red", lty = 2)
# Controles gDNA
plot(ratios$`gdna/gens`, xlab = "", ylab = "gdna/gens", col = colores,
xaxt = "n", pch=19)
axis(1, at = 1:nrow(ratios), labels = rownames(ratios),
las = 2, cex.axis = 0.6)
abline(h = 0.039, col = "red")
# Controles Negativos
plot(ratios$`nc/gens`, xlab = "", ylab = "nc/gens", col = colores,
xaxt = "n", pch=19)
axis(1, at = 1:nrow(ratios), labels = rownames(ratios),
las = 2, cex.axis = 0.6)
abline(h = 0.045, col = "red")
# Median
plot(ratios$median, xlab = "", ylab = "Median", col = colores,
xaxt = "n", pch = 19, ylim = c(0, max(130, max(ratios$median))))
axis(1, at = 1:nrow(ratios), labels = rownames(ratios),
las = 2, cex.axis = 0.6)
abline(h = 5, col = "red")
# ERCC
plot(ratios$"ERCC/gens", xlab = "", ylab = "ERCC", col = colores,
xaxt = "n", pch=19)
axis(1, at = 1:nrow(ratios), labels = rownames(ratios),
las = 2, cex.axis = 0.6)
abline(h = 0.025, col = "red")
# Añadir las columnas de htg_meta a ratios manteniendo el orden original de ratios
ratios[, c("GROUP", "p53", "HTG_RUN", "Age", "Ciclina_D1", "FIGO_INICIAL_VS_AVANZADO")] <-
AnnotData[match(rownames(ratios), AnnotData$SampleID),
c("GROUP", "p53", "HTG_RUN", "Age", "Ciclina_D1", "FIGO_INICIAL_VS_AVANZADO")]
ratios$PCA <- ifelse(rownames(ratios) %in% muestras_a_etiquetar, "2", "0")
ratios$PCA_genes<- ifelse(rownames(ratios) %in% muestras_a_etiquetar2, "2", "0")
# Nueva matriz a partir de las columnas de los valores de ratios de los controles
ratios_heat <- ratios[, c(4:11,19,20)]
ratios_heat <- as.matrix(ratios_heat)
# Se añade una cuarta columna a ratios_heat con los tamaños de librería de lib_s2
ratios_heat <- cbind(ratios_heat, Size = "")
ratios_heat[,"Size"] <- lib_s2[match(rownames(ratios_heat), rownames(lib_s2)),"Size"]
ratios_heat <- as.data.frame(ratios_heat)
# Se convierten los valores de ratios_heat a numéricos
ratios_heat[] <- as.data.frame(lapply(ratios_heat, as.numeric))
# Función para asignar 01 según el valor QC
assign_01_QC <- function(valor, umbral){
ifelse(valor < umbral, 0, 1)
}
# Función para asignar 01 según el valor tamaño librería
assign_01_size <- function(valor, umbral){
ifelse(valor > umbral, 0, 1)
}
# Especificar los umbrales para los colores
umbral_pos <- 4
umbral_gdna <- 0.02
umbral_neg <- 0.05
umbral_size <- 5e+06
umbral_median <- 5
umbral_pca <- 1
umbral_ERCC <- 0.05
# Crear matriz binaria para el heatmap
bin_matrix <- matrix(0, nrow = nrow(ratios_heat), ncol = 7)
for (i in 1:nrow(ratios_heat)) {
bin_matrix[i, 1] <- assign_01_QC(ratios_heat[i, "pos/gens"], umbral_pos)
bin_matrix[i, 2] <- assign_01_size(ratios_heat[i,"Size"], umbral_size)
bin_matrix[i, 3] <- assign_01_QC(ratios_heat[i, "nc/gens"], umbral_neg)
bin_matrix[i, 4] <- assign_01_QC(ratios_heat[i, "gdna/gens"], umbral_gdna)
bin_matrix[i, 5] <- assign_01_QC(ratios_heat[i,"ERCC/gens"], umbral_ERCC)
bin_matrix[i, 6] <- assign_01_size(ratios_heat[i,"median"], umbral_median)
#bin_matrix[i, 7] <- assign_01_QC(ratios_heat[i, "PCA"], umbral_pca)
bin_matrix[i, 7] <- assign_01_QC(ratios_heat[i,"PCA_genes"], umbral_pca)
}
# Nombres de filas y columnas
rownames(bin_matrix) <- rownames(ratios_heat)
colnames(bin_matrix) <- c("QC0","QC1","QC2","QC3","QC4","median", "PCA_genes")
# Dataframe an_col con las columnas de anotación del heatmap
# an_col <- ratios[, c("GROUP", "flag","p53","HTG_RUN","Ciclina_D1", "FIGO_INICIAL_VS_AVANZADO")]
# colnames(an_col) <- c("GROUP", "Flag","p53","HTG_RUN","Ciclina_D1", "FIGO_I_VS_A")
# Dataframe an_colors con los colores para las anotaciones
# an_colors <- list(
#   Group = c("PCNSL" = "blue", "SCNSL" = "green", "DLBCL with CNS inv" = "yellow",
#             "DLBCL wo CNS inv" = "red", "REACTIVE BRAIN INFILTRATE" = "black"),
#   Tissue = c("BMO" = "coral2","bone" ="antiquewhite2", "CNS" = "hotpink",
#                    "lymph node" = "aquamarine3", "mucosa" = "skyblue4",
#                    "soft tissue/skin"= "gold3"),
#   Flag = c("yes" = "olivedrab3", "no" = "indianred2", "na" = "grey")
# )
pheatmap(bin_matrix,
#annotation_row = an_col,
cluster_rows = FALSE,
cluster_cols = FALSE,
fontsize_row = 7,
fontsize = 8,
# annotation_colors = an_colors,
legend_breaks = c(0, 1),
legend_labels = c("OK", "NO"),
cellwidth = 40,
name = "QC"
)
# rows_with_1 <- rownames(bin_matrix)[apply(bin_matrix, 1, any)]
rows_with_1 <- suppressWarnings(rownames(bin_matrix)[apply(bin_matrix, 1, any)])
sorted_rows <- sort(rows_with_1)
sorted_rows
length(sorted_rows)
############## density plot can not start at 0 because log10 (0) can not exist.
densities <- apply(counts, 2, function(x) density(log10(x)))
# Plot densities
for (i in 1:ncol(counts)) {
plot(densities[[i]], main = paste("Density plot for", colnames(counts)[i]), xlab = "log10(Counts)", ylab = "Density")
}
###############
# Reshape to long format
counts_long <- counts %>%
pivot_longer(everything(), names_to = "Sample", values_to = "Count")
# Plot density of log10-transformed counts for each sample
ggplot(counts_long, aes(x = log10(Count), fill = Sample)) +
geom_density(alpha = 0.5) +
scale_x_log10() +
labs(x = "Log10 Counts", y = "Density", fill = "Sample") +
theme_bw()
AnnotData$Ciclina_D1 <- ifelse(AnnotData$Ciclina_D1 > 60, "up", "down")
table(is.na(AnnotData$Ciclina_D1 ))
table(AnnotData$Ciclina_D1)
AnnotData$HTG_RUN <- as.factor(AnnotData$HTG_RUN)
AnnotData$sampleID_New <- paste(AnnotData$SampleID, AnnotData$HPVstatus, AnnotData$HTG_RUN, sep = "_")
save(counts_filtered_ordered, AnnotData, file = "data.RData")
load('data.Rdata')
sort(rows_with_1) #check heatmap chunk.
counts_filtered <- counts_filtered[, !colnames(counts_filtered) %in% rows_with_1]
# Remove corresponding rows from AnnotData
AnnotData <- AnnotData[!AnnotData$SampleID %in% rows_with_1, ]
# Display the modified data
head(counts_filtered)
head(AnnotData)
dim(counts_filtered)
dim(AnnotData)
AnnotData <- AnnotData[order(AnnotData$SampleID), ]
counts_filtered <- counts_filtered[, order(colnames(counts_filtered))]
identical(colnames(counts_filtered), AnnotData$SampleID)
dds <- DESeqDataSetFromMatrix(countData = counts_filtered,
colData = AnnotData,
design = ~HPVstatus)
### HEMOS SUBIDO DE 10 a 200 el keep_rows.
n_genes <- nrow(counts)
n_subj <- nrow(AnnotData)
table(AnnotData$HPVstatus)
smallestGroupSize <- ceiling(n_subj*0.2)
keep_rows <- rowSums(counts(dds) >= 200) >= smallestGroupSize # genes with at least 18 (20% of the sample) subjects with >10 counts
keep_cols <- colSums(counts(dds) >= 10) >= ceiling(n_genes*0.3) # subjects with at least 30% of genes with counts>10
dds <- dds[keep_rows,keep_cols]
dds
table(dds$HPVstatus)
vsd <- vst(dds, blind = FALSE)
ntd <- normTransform(dds)
dds <- DESeq(dds)
select <- order(rowMeans(counts(dds,normalized=TRUE)),
decreasing=TRUE)[1:500]
df <- as.data.frame(colData(dds)[,c("p53","HPVstatus","HTG_RUN","Ciclina_D1")])
df <- df %>% arrange(HPVstatus)
### WO forcing them.
pheatmap(assay(vsd)[select,], cluster_rows=FALSE, show_rownames=FALSE,
cluster_cols=TRUE, annotation_col=df, replace = FALSE)
pca_plot <- plotPCA(vsd, intgroup = c("HPVstatus"))
p <- ggplot(counts_data, aes(x = !!sym(intgroup), y = Count)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = paste("Counts of", gene, "by", intgroup),
x = intgroup, y = "Count") +
theme_minimal()
vsd
dds
pca_plot <- plotPCA(vsd, intgroup = c("HPVstatus"))
vsd$HPVstatus
pca_plot
pca_plot <- plotPCA(vsd, intgroup = c("HTG_RUN"))
plotPCA
library(usethis)
use_data_raw()
